#include<iostream>
#include<cmath>
#include<tuple>
#include<vector>
#include<algorithm>
using namespace std;
typedef tuple<long long,long long> courset;
bool comp(const courset &first, const courset &sec)
{
	if(get<1>(first)<get<1>(sec))
	{
		return true;
	}
	else if(get<1>(first)>get<1>(sec))
	{
		return false;
	}
	else if(get<1>(first)==get<1>(sec))
	{
		if(get<0>(first)<=get<0>(sec))
		{
			return true;
		}	
		else if(get<0>(first)>get<0>(sec))
		{
			return false;
		}	
	}
}
int main()
{
	long long n,q,i,j,k,l,curt=1,cs,ce;
	cin>>n>>q;
	/*long long *cs=new long long[n];
	long long *ce=new long long[n];	
	long long *stat=new long long[n];*/
	long long *qs=new long long[q];
	long long *qe=new long long[q];
	vector<courset> course;
	
	for(i=0;i<n;i++)
	{
		cin>>cs>>ce;
		course.push_back(make_tuple(cs,ce));
		
	}
	sort(course.begin(),course.end(),comp);
	for(i=0;i<q;i++)
	{
		cin>>qs[i]>>qe[i];
		curt=qs[i];
		
		long long minend=1000001;
		long long numc=0;
		long long counter=0;
		int flag=0;
		for(j=curt;)
		/*do{
			minend=1000001;
			flag=0;
			for(j=0;j<n;j++)
			{
				if(stat[j]==0 &&  cs[j]>=curt && ce[j]<minend)
				{
					minend=ce[j]; 
					counter=j;	
					flag=1;
				}
			}
			if(minend<=qe[i])
			{
				numc++;
				curt=minend;
				stat[counter]=1;
			}	
		}while(minend<=qe[i] && flag==1);
		cout<<numc<<endl;*/
	}
	return 0;
	
	
}
